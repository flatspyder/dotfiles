#!/bin/bash
#
# Install base16 templates and set themes globally.

is_mac() {
  [[ "$(uname)" == "Darwin" ]]
}

readonly SCRIPT_NAME="$0"
if ! is_mac; then
  readonly SCRIPT=$(readlink -f "${SCRIPT_NAME}")
else
  readonly SCRIPT=$(greadlink -f "${SCRIPT_NAME}")
fi
readonly SCRIPT_PATH=$(dirname ${SCRIPT})
readonly CONFIG_PATH="${HOME}/.base16-manager"

err() {
  echo "ERROR: $@" >&2
}

usage() {
  echo "Usage: base16-manager [option]"
  echo "Options:"
  echo "    set          'base16-theme'         Sets the theme"
  echo "    install      'username/repository'  Installs a new template"
  echo "    uninstall    'username/repository'  Uninstalls a template"
  echo "    list                                Lists installed templates"
  echo "    list-themes                         Lists installed themes"
  echo "    update                              Updates installed templates"
  echo "    clean                               Cleans up leftovers"
  echo "    self-update                         Updates this script"
}

dir_exists() {
  local dir=$1

  [[ -d "${dir}" ]] && true || false
}

file_exists() {
  local file=$1

  [[ -f "${file}" ]] && true || false
}

check_dir() {
  local dir=$1

  if ! dir_exists "${dir}"; then
    mkdir "${dir}"
  fi
}

check_arg() {
  local arg=$1

  if [[ -z "${arg}" ]]; then
    usage
    exit
  fi
}

install() {
  local template=$1
  local repository="https://github.com/${template}"

  check_dir ${CONFIG_PATH}

  if ! git ls-remote --exit-code -h "${repository}" > /dev/null; then
    err "Template repository not found."
    exit
  fi

  git clone "${repository}" "$CONFIG_PATH/${template}"
}

uninstall() {
  local template=$1

  check_dir "${CONFIG_PATH}/${template}"

  rm -rf "${CONFIG_PATH}/${template}"

  echo "Uninstalled ${template}."
}

list() {
  if ! is_mac; then
    find ${CONFIG_PATH} -maxdepth 2 -mindepth 2 -type d -printf "%P\n"
  else
    gfind ${CONFIG_PATH} -maxdepth 2 -mindepth 2 -type d -printf "%P\n"
  fi
}

list_themes() {
  find ${CONFIG_PATH} -type f -name 'base16-*' | \
    sed "s/.*\/base16-//" | \
    sed "s/\..*//" | \
    sort | uniq
}

update() {
  local packages=$(list)

  if [[ -z "${packages}" ]]; then
    err "No packages installed."
    exit
  fi

  for package in ${packages}; do
    cd "${CONFIG_PATH}/${package}"
    git pull -f origin master
  done

  echo "All packages updated."
}

clean() {
  find ${CONFIG_PATH} -maxdepth 1 -type d -empty -delete

  check_dir ${CONFIG_PATH}

  echo "Cleaned up ${CONFIG_PATH}."
}

self_update() {
  cd "${SCRIPT_PATH}"
  mv "base16-manager" "base16-manager.old"

  curl -o "base16-manager" \
    "https://raw.githubusercontent.com/AuditeMarlow/base16-manager/master/base16-manager"

  chmod +x "base16-manager"

  echo "Updated base16-manager."
}

set_theme() {
  local theme=$1
  local packages=$(list)

  if [[ -z "${packages}" ]]; then
    err "No packages installed."
    exit
  fi

  for package in ${packages}; do
    case "${package}" in
      "0xdec/base16-rofi")
        set_rofi "${package}" "${theme}"
        ;;
      "chriskempson/base16-shell")
        set_shell "${package}" "${theme}"
        ;;
      "chriskempson/base16-vim")
        set_vim "${package}" "${theme}"
        ;;
      "chriskempson/base16-xresources")
        set_xresources "${package}" "${theme}"
        ;;
      "khamer/base16-dunst")
        set_dunst "${package}" "${theme}"
        ;;
      "nicodebo/base16-fzf")
        set_fzf "${package}" "${theme}"
        ;;
      *)
        err "Package ${package} is not (yet) supported."
        ;;
    esac
  done

  echo "Set theme to ${theme}. You may need to restart DE and terminals."
}

set_dunst() {
  local package=$1
  local theme=$2
  local file="${CONFIG_PATH}/${package}/themes/base16-${theme}.dunstrc"
  local config="${HOME}/.config/dunst/dunstrc"

  if ! file_exists "${file}"; then
    err "Dunst theme not found."
  else
    sed '/^\[base16_low\]$/,/^\s+foreground(.*)$/d' "${config}" > /tmp/dunstrc
    [[ -f "${config}.bac" ]] && rm "${config}.bac"
    mv ${config} "${config}.bac"
    cat /tmp/dunstrc "${file}" > "${config}"

    # Kill dunst to force reload new configuration.
    [[ ! -z "$(pidof dunst)" ]] && killall dunst
  fi
}

set_fzf() {
  local package=$1
  local theme=$2
  local file="${CONFIG_PATH}/${package}/build_scheme/base16-${theme}.config"
  local line="[ -f ~/.fzf.colors ] && source ~/.fzf.colors"
  local configs=".bashrc .zshrc .config/fish/config.fish"

  if ! file_exists "${file}"; then
    err "FZF theme not found."
  else
    cp "${file}" "${HOME}/.fzf.colors"

    for config in ${configs}; do
      if ! file_exists "${HOME}/${config}"; then
        touch "${HOME}/${config}"
      fi

      if ! grep -Fxq "${line}" "${HOME}/${config}"; then
        echo "${line}" >> "${HOME}/${config}"
      fi
    done
  fi
}

set_rofi() {
  local package=$1
  local theme=$2
  local file="${CONFIG_PATH}/${package}/themes/base16-${theme}.config"

  if ! file_exists ${file}; then
    err "Rofi theme not found."
  else
    cp "${file}" "${HOME}/.config/rofi/config"
  fi
}

set_shell() {
  local package=$1
  local theme=$2
  local file="${CONFIG_PATH}/${package}/scripts/base16-${theme}.sh"
  local helper="${CONFIG_PATH}/${package}/profile_helper.sh"
  local fish_dir="${HOME}/.config/fish"
  local fish_config="${fish_dir}/config.fish"
  local fish_string="# Base16 Shell
if status --is-interactive
    eval sh \$HOME/.config/base16-shell/scripts/base16-${theme}.sh
end"

  if ! file_exists ${helper}; then
    err "Shell helper not found."
  elif ! file_exists ${file}; then
    err "Shell theme not found."
  else
    eval "$(${helper})"
    _base16 "${file}"

    if command -v fish >/dev/null 2>&1; then
      # Make fish theme permanent
      [[ ! -d ${fish_dir} ]] && mkdir ${fish_dir}
      [[ ! -f ${fish_config} ]] && touch ${fish_config}

      sed '/^# Base16 Shell$/,/^end$/d' ${fish_config} > /tmp/fish_config
      [[ -f "${fish_config}.bac" ]] && rm "${fish_config}.bac"
      mv ${fish_config} "${fish_config}.bac"
      mv /tmp/fish_config "${fish_config}"
      echo "${fish_string}" >> ${fish_config}
    fi
  fi
}

set_vim() {
  local package=$1
  local theme=$2
  local file="${CONFIG_PATH}/${package}/colors/base16-${theme}.vim"
  local vim_files="${HOME}/.vimrc ${HOME}/.config/nvim/init.vim"

  if ! file_exists ${file}; then
    err "Vim theme not found."
  else
    for vim_file in ${vim_files}; do
      if file_exists "${vim_file}"; then
        grep -Evx "(colorscheme|colo).*" "${vim_file}" > /tmp/vim_config
        rm "${vim_file}.bac"
        mv "${vim_file}" "${vim_file}.bac"
        mv /tmp/vim_config "${vim_file}"
        echo "colorscheme base16-${theme}" >> "${vim_file}"
      fi
    done
  fi
}

set_xresources() {
  local package=$1
  local theme=$2
  local file="${CONFIG_PATH}/${package}/xresources/base16-${theme}.Xresources"

  if ! file_exists ${file}; then
    err "Xresources theme not found."
  else
    cp "${file}" "${HOME}/.Xresources.d/colors"

    # TODO: Check if ~/.Xresources includes colors file.
    xrdb -load "$HOME/.Xresources"
  fi
}

main() {
  check_dir ${CONFIG_PATH}

  local option=$1
  local arg=$2

  if [[ -z "${option}" ]]; then
    usage
    exit
  fi

  case ${option} in
    "install")
      check_arg "${arg}"
      install "${arg}"
      ;;
    "uninstall")
      check_arg "${arg}"
      uninstall "${arg}"
      ;;
    "list")
      list
      ;;
    "list-themes")
      list_themes
      ;;
    "update")
      update
      ;;
    "set")
      check_arg "${arg}"
      set_theme "${arg}"
      ;;
    "clean")
      clean
      ;;
    "self-update")
      self_update
      ;;
    *)
      usage
      ;;
  esac

  exit
}

main "$@"
