# Simple zsh prompt.
#
# dotfiles ❯ (default)
# dotfiles master ❯ (in git repository)
# root@serv dotfiles master ❯ (with SSH)
#
# * is prepended to git branch name if repo is dirty.
# ❯ is red if previous command exit status was 1.
#
# Author: Oli Gaymond (oli.gaymond.co.uk)

# turns seconds into human readable time
# 165392 => 1d 21h 56m 32s
prompt_oligaymond_human_time() {
	local tmp=$1
	local days=$(( tmp / 60 / 60 / 24 ))
	local hours=$(( tmp / 60 / 60 % 24 ))
	local minutes=$(( tmp / 60 % 60 ))
	local seconds=$(( tmp % 60 ))
	(( $days > 0 )) && echo -n "${days}d "
	(( $hours > 0 )) && echo -n "${hours}h "
	(( $minutes > 0 )) && echo -n "${minutes}m "
	echo "${seconds}s"
}

# displays the exec time of the last command if set threshold was exceeded
prompt_oligaymond_cmd_exec_time() {
	local stop=$EPOCHSECONDS
	local start=${cmd_timestamp:-$stop}
	integer elapsed=$stop-$start
	(($elapsed > ${OLIGAYMOND_CMD_MAX_EXEC_TIME:=5})) && prompt_oligaymond_human_time $elapsed
}

prompt_oligaymond_preexec() {
	cmd_timestamp=$EPOCHSECONDS
}

prompt_oligaymond_precmd() {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  local TERMWIDTH
  (( TERMWIDTH = ${COLUMNS} - 1 ))

  local exec_time
  exec_time=`prompt_oligaymond_cmd_exec_time`
  if [[ -n "$exec_time" ]]; then
      local prompt_oligaymond_preprompt="%F{yellow}$exec_time%f"
      print -P $prompt_oligaymond_preprompt
  fi

  # reset value since `preexec` isn't always triggered
  unset cmd_timestamp
}

function title_prompt {
    print -Pn "\e]0;%n@%m: %~\a"
}

function list-files {
  echo `script -q /dev/null ls -G . | tr -d '\r' | cat`
}

begin_with() {
    local string="${1}"
    shift
    local element=''
    for element in "$@"; do
        if [[ "${string}" =~ "^${element}" ]]; then
            return 0
        fi
    done
    return 1
}

git_check_if_worktree() {
    # Check if the current path is in a git repo. Only to be executed in chpwd().

    # The : separated list of paths where we will run check for git repo.
    # If not set, then we will do it only for /root and /home.
    if [ "${UID}" = '0' ]; then
        # running 'git' in repo changes owner of git's index files to root, skip prompt git magic if CWD=/home/*
        git_check_if_workdir_path="${git_check_if_workdir_path:-/root:/etc}"
    else
        git_check_if_workdir_path="${git_check_if_workdir_path:-/home:/Users}"
        git_check_if_workdir_path_exclude="${git_check_if_workdir_path_exclude:-${HOME}/_sshfs}"
    fi

    if begin_with "${PWD}" ${=git_check_if_workdir_path//:/ }; then
        if ! begin_with "${PWD}" ${=git_check_if_workdir_path_exclude//:/ }; then
            local git_pwd_is_worktree_match='true'
        else
            local git_pwd_is_worktree_match='false'
        fi
    fi

    if ! [ "${git_pwd_is_worktree_match}" = 'true' ]; then
        git_pwd_is_worktree='false'
        return 1
    fi

    # todo: Prevent checking for /.git or /home/.git, if PWD=/home or PWD=/ maybe...
    #   damn annoying RBAC messages about Access denied there.
    if [ -d '.git' ] || [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = 'true' ]; then
        git_pwd_is_worktree='true'
        git_worktree_is_bare="$(git config core.bare)"
    else
        unset git_branch git_worktree_is_bare
        git_pwd_is_worktree='false'
    fi
}

git_branch() {
    git_branch="$(git symbolic-ref -q --short HEAD)"
    git_branch="${git_branch:-no branch}"
}

git_dirty() {
    if [ "${git_worktree_is_bare}" = 'false' ] && [ -n "$(git status --untracked-files='no' --porcelain)" ]; then
        git_dirty='true'
    else
        unset git_dirty
    fi
}

# branch \ue0a0
# plus-minus \u2213
# lightning \u26a1

git_status() {
    if [ "${git_pwd_is_worktree}" = 'true' ]; then
        local branch_symbol=""
        git_branch
        git_dirty
        
        if [[ -z "$git_dirty" ]]; then
            git_prompt="%B%F{black}${git_branch} ${branch_symbol}%b%f"
        else
            git_prompt="%F{red}${git_branch} ${branch_symbol}%f"
        fi
    else
        unset git_prompt
    fi   
}

prompt_oligaymond_setup() {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  prompt_opts=(cr percent subst)

  # disables prompt mangling in virtual_env/bin/activate
  export VIRTUAL_ENV_DISABLE_PROMPT=1

  zmodload zsh/datetime
  autoload -Uz add-zsh-hook

  add-zsh-hook precmd prompt_oligaymond_precmd
  add-zsh-hook precmd git_status
  add-zsh-hook preexec prompt_oligaymond_preexec
  add-zsh-hook chpwd title_prompt
  add-zsh-hook chpwd git_check_if_worktree

  if [ -z $SSH_TTY ]; then
      ZSSH=
  else
      ZSSH='%F{magenta}%n%f@'
  fi

  PROMPT='${ZSSH}%F{magenta}%m%f %F{cyan}${VIRTUAL_ENV:+"($VIRTUAL_ENV:t) "}%f%(!.%B%F{red}# %f%b.%B%(?.%F{white}.%F{red})❯%f%b) '
  RPROMPT='${git_prompt}'
  SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]?'
}

prompt_oligaymond_setup "$@"
